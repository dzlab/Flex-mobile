<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2010 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ViewMenu.  

@see spark.components.ViewMenu

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5">
    
    <fx:Metadata>
        <![CDATA[ 
        /** 
        * @copy spark.skins.spark.ApplicationSkin#hostComponent
        */
        [HostComponent("spark.components.ViewMenu")]
        ]]>
    </fx:Metadata> 
    
    <fx:Script fb:purpose="styling">
        <![CDATA[
            import mx.core.DPIClassification;
            import mx.core.FlexGlobals;
            import mx.core.mx_internal;
            import mx.utils.ColorUtil;
            
            import spark.components.ViewMenuItem;
            import spark.effects.easing.Power;
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                super.initializationComplete();
                
                var borderWeight:uint;
                var horizontalPadding:uint;
                var verticalPadding:uint;
                var gap:uint;
                var glossHeight:uint;
                
                switch (applicationDPI)
                {
                    case DPIClassification.DPI_320:
                    {
                        glossHeight = 98;
                        horizontalPadding = 42;
                        verticalPadding = 42;
                        gap = 16;
                        borderWeight = 2;
                        
                        break;
                    }
                    case DPIClassification.DPI_240:
                    {
                        glossHeight = 74;
                        horizontalPadding = 32;
                        verticalPadding = 32;
                        gap = 12;
                        borderWeight = 1;
                        
                        break;
                    }
                    default:
                    {
                        // default DPI_160
                        glossHeight = 49;
                        horizontalPadding = 21;
                        verticalPadding = 21;
                        gap = 8;
                        borderWeight = 1;
                        
                        break;
                    }
                }
                
                fill.scaleX = glossHeight;
                
                chromeGroupLayout.paddingLeft = chromeGroupLayout.paddingRight = horizontalPadding;
                chromeGroupLayout.paddingTop = chromeGroupLayout.paddingBottom = verticalPadding;
                chromeGroupLayout.gap = gap * 1.5;
                
                contentGroupLayout.gap = gap;
                
                // top border dark
                darkBorder.stroke.weight = borderWeight;
                
                // top border light
                lightBorder.top = borderWeight;
                lightBorder.stroke.weight = borderWeight;
            }
            
            public function get applicationDPI():int
            {
                return FlexGlobals.topLevelApplication.applicationDPI;
            }
            
            override protected function measure():void
            {
                super.measure();
                
                // not actually used in normal situations, but 
                // is here to prevent bug 28950 if ViewMenu is misused
                measuredHeight = 200;
            }
            
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                super.updateDisplayList(unscaledWidth, unscaledHeight);
                
                var contentBackgroundColor:uint = getStyle("contentBackgroundColor");
                
                fillRect.alpha = getStyle("contentBackgroundAlpha");
                
                fillEntry1.color = ColorUtil.adjustBrightness2(contentBackgroundColor, 15);
                fillEntry2.color = ColorUtil.adjustBrightness2(contentBackgroundColor, 10);
                fillEntry3.color = contentBackgroundColor;
                fillEntry4.color = contentBackgroundColor;
            }
            
        ]]>
    </fx:Script>
    
    <s:states>
        <s:State name="normal"                          stateGroups="openedGroup"/>
        <s:State name="closed"                          stateGroups="closedGroup"/>
        <s:State name="disabled"                        stateGroups="openedGroup"/>
        <s:State name="normalAndLandscape"              stateGroups="openedGroup, landscapeGroup"/>
        <s:State name="closedAndLandscape"              stateGroups="closedGroup, landscapeGroup"/>
        <s:State name="disabledAndLandscape"            stateGroups="openedGroup, landscapeGroup" />
    </s:states>
    
    <s:transitions>
        <s:Transition fromState="closed" toState="normal" autoReverse="true">
            <s:Parallel>
                <s:Fade target="{background}" duration="300"/> 
                <s:Move target="{chromeGroup}" duration="300" disableLayout="true" easer="{new Power(0, 5)}"/>
            </s:Parallel>
        </s:Transition>
        
        <s:Transition fromState="closedAndLandscape" toState="normalAndLandscape" autoReverse="true">
            <s:Parallel>
                <s:Fade target="{background}" duration="300"/> 
                <s:Move target="{chromeGroup}" duration="300" disableLayout="true" easer="{new Power(0, 5)}"/>
            </s:Parallel>
        </s:Transition>
        
        <s:Transition fromState="normal" toState="closed" autoReverse="true">
            <s:Parallel>
                <s:Fade target="{background}" duration="300"/> 
                <s:Move target="{chromeGroup}" duration="300" disableLayout="true" easer="{new Power(0, 5)}"/>
            </s:Parallel>
        </s:Transition>
        
        <s:Transition fromState="normalAndLandscape" toState="closedAndLandscape" autoReverse="true">
            <s:Parallel>
                <s:Fade target="{background}" duration="300"/> 
                <s:Move target="{chromeGroup}" duration="300" disableLayout="true" easer="{new Power(0, 5)}"/>
            </s:Parallel>
        </s:Transition>
    </s:transitions>
    
    <!-- The ViewMenu and its skin are sized to the application.
    The menu chrome is a separate group that is anchored to the bottom of the skin. -->
    
    <s:Rect id="background" left="0" right="0" top="0" bottom="0" visible.closedGroup="false">
        <s:fill>
            <s:SolidColor color="0x000000" alpha="0" alpha.openedGroup="0.5"/>
        </s:fill>
    </s:Rect>
    
    <s:Group id="chromeGroup"
             left="0"
             right="0"
             top.closedGroup="{hostComponent.height - chromeGroup.height / 2}"
             bottom.openedGroup="0" 
             visible.closedGroup="false">
        
        <s:Rect id="fillRect" left="0" right="0" top="0" bottom="0">
            <s:fill>
                <s:LinearGradient id="fill" x="0" y="0" rotation="90">
                    <s:GradientEntry id="fillEntry1" ratio="0"/>
                    <s:GradientEntry id="fillEntry2" ratio="0.5"/>
                    <s:GradientEntry id="fillEntry3" ratio="0.5"/>
                    <s:GradientEntry id="fillEntry4" ratio="1.0"/>
                </s:LinearGradient>
            </s:fill>
        </s:Rect>
        
        <s:Line id="darkBorder" left="0" top="0" right="0">
            <s:stroke>
                <s:SolidColorStroke color="0x000000" alpha="0.6"/>
            </s:stroke>
        </s:Line>
        
        <s:Line id="lightBorder" left="0" right="0">
            <s:stroke>
                <s:SolidColorStroke color="0xFFFFFF" alpha="0.2"/>
            </s:stroke>
        </s:Line>
        
        <s:Group width="100%" height="100%">
            
            <s:layout>
                <s:VerticalLayout id="chromeGroupLayout"
                                  horizontalAlign="justify"/>
            </s:layout>
            
            <!--
            Note: setting the minimum size to 0 here so that changes to the host component's
            size will not be thwarted by this skin part's minimum size.   This is a compromise,
            more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
            -->
            <!--- @copy spark.components.SkinnableContainer#contentGroup -->
            <s:Group id="contentGroup">
                <s:layout>
                    <s:VerticalLayout id="contentGroupLayout" horizontalAlign="justify"/>
                </s:layout>
            </s:Group>
            
            <s:ViewMenuItem id="cancelButton" label="Cancel"/>
            
        </s:Group>
        
    </s:Group>
</s:Skin>
